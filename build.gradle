buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'net.researchgate:gradle-release:2.4.0'
//    classpath 'com.netflix.nebula:gradle-lint-plugin:7.8.0'
  }
}

apply plugin: 'net.researchgate.release'

allprojects {
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: 'checkstyle'
  apply plugin: 'pmd'
  apply plugin: 'findbugs'

//  apply plugin: 'nebula.lint'

  repositories {
    mavenCentral()
    jcenter()
  }

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  dependencies {

//    gradleLint.ignore {
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.16'

    // logging
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.11'
//    }

    compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '5.0.3'

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
  }


  eclipse {
    classpath {
      containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
      containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
  }

  checkstyle {
    toolVersion = '7.8.1'
    showViolations = true
    configFile = rootProject.file("config/checkstyle/checkstyle.xml")
  }

  pmd {
    ruleSets = [] // This overwrites the rules that are being added
    ruleSetFiles = rootProject.files("config/pmd/pmd.xml")
  }

  tasks.withType(Checkstyle) {
    reports {
      html.destination rootProject.file("build/reports/checkstyle.html")
    }
  }

  tasks.withType(FindBugs) {
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
      reports.all { report ->
        def outputFile = report.destination
        if (outputFile.exists() && outputFile.text.contains("<error ")) {
          throw new GradleException("There were checkstyle warnings! For more info check file://${reports.html.destination}")
        }
      }
    }
  }
//  gradleLint.rules = ['all-dependency']
}


release {
  preCommitText = '[skip ci]'

  git {
    requireBranch = ''
  }
}

